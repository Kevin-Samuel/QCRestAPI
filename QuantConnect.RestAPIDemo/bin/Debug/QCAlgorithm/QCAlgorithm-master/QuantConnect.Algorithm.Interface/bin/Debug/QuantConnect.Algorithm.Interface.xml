<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Algorithm.Interface</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.IAlgorithm">
            <summary>
            Interface for Algorithm Class Libraries
            </summary>
        </member>
        <member name="M:QuantConnect.IAlgorithm.Initialize">
            <summary>
            Initialise the Algorithm and Prepare Required Data:
            </summary>
        </member>
        <member name="M:QuantConnect.IAlgorithm.Debug(System.String)">
            <summary>
            Send debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.Log(System.String)">
            <summary>
            Save entry to the Log 
            </summary>
            <param name="message">String message</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.Error(System.String)">
            <summary>
            Send an error message for the algorithm
            </summary>
            <param name="message">String message</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.OnEndOfDay">
            <summary>
            Call this method at the end of each day of data.
            </summary>
        </member>
        <member name="M:QuantConnect.IAlgorithm.OnEndOfAlgorithm">
            <summary>
            Call this event at the end of the algorithm running.
            </summary>
        </member>
        <member name="M:QuantConnect.IAlgorithm.OnOrderEvent(QuantConnect.OrderEvent)">
            <summary>
            EXPERTS ONLY:: [-!-Async Code-!-] 
            New order event handler: on order status changes (filled, partially filled, cancelled etc).
            </summary>
            <param name="newEvent">Event information</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetDateTime(System.DateTime)">
            <summary>
            Set the DateTime Frontier: This is the master time and is 
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetRunMode(QuantConnect.RunMode)">
            <summary>
            Set the run mode of the algorithm: series, parallel or automatic.
            </summary>
            <param name="mode">Run mode to select, default Automatic</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetStartDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the start date of the backtest period. This must be within available data.
            </summary>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetStartDate(System.DateTime)">
            <summary>
            Alias for SetStartDate() which accepts DateTime Class
            </summary>
            <param name="start">DateTime Object to Start the Algorithm</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetEndDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the end Backtest date for the algorithm. This must be within available data.
            </summary>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetEndDate(System.DateTime)">
            <summary>
            Alias for SetStartDate() which accepts DateTime Object
            </summary>
            <param name="end">DateTime End Date for Analysis</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetAlgorithmId(System.String)">
            <summary>
            Set the algorithm Id for this backtest or live run. This can be used to identify the order and equity records.
            </summary>
            <param name="algorithmId">unique 32 character identifier for backtest or live server</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetLocked">
            <summary>
            Set the algorithm as initialized and locked. No more cash or security changes.
            </summary>
        </member>
        <member name="M:QuantConnect.IAlgorithm.GetChartUpdates">
            <summary>
            Get the chart updates since the last request:
            </summary>
            <returns>List of Chart Updates</returns>
        </member>
        <member name="M:QuantConnect.IAlgorithm.AddChart(QuantConnect.Chart)">
            <summary>
            Add a chart to the internal algorithm list.
            </summary>
            <param name="chart">Chart object to add</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.AddSecurity(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Set a required MarketType-symbol and resolution for algorithm
            </summary>
            <param name="securityType">MarketType Enum: Equity, Commodity, FOREX or Future</param>
            <param name="symbol">Symbol Representation of the MarketType, e.g. AAPL</param>
            <param name="resolution">Resolution of the MarketType required: MarketData, Second or Minute</param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice.</param>
            <param name="leverage">leverage for this security</param>
            <param name="extendedMarketHours">ExtendedMarketHours send in data from 4am - 8pm, not used for FOREX</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetCash(System.Decimal)">
            <summary>
            Set the starting capital for the strategy
            </summary>
            <param name="startingCash">decimal starting capital, default $100,000</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.Order(System.String,System.Int32,QuantConnect.OrderType,System.Boolean)">
            <summary>
            Send an order to the transaction manager.
            </summary>
            <param name="symbol">Symbol we want to purchase</param>
            <param name="quantity">Quantity to buy, + is long, - short.</param>
            <param name="type">Market, Limit or Stop Order</param>
            <param name="asynchronous">Don't wait for the response, just submit order and move on.</param>
            <returns>Integer Order ID.</returns>
        </member>
        <member name="M:QuantConnect.IAlgorithm.Liquidate(System.String)">
            <summary>
            Liquidate your portfolio holdings:
            </summary>
            <param name="symbolToLiquidate">Specific asset to liquidate, defaults to all.</param>
            <returns>list of order ids</returns>
        </member>
        <member name="M:QuantConnect.IAlgorithm.Quit(System.String)">
            <summary>
            Terminate the algorithm on exiting the current event processor. 
            If have holdings at the end of the algorithm/day they will be liquidated at market prices.
            If running a series analysis this command skips the current day (and doesn't liquidate).
            </summary>
            <param name="message">Exit message</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.SetQuit(System.Boolean)">
            <summary>
            Set the quit flag true / false.
            </summary>
            <param name="quit">When true quits the algorithm event loop for this day</param>
        </member>
        <member name="M:QuantConnect.IAlgorithm.GetQuit">
            <summary>
            Get the quit flag state. 
            </summary>
            <returns>Boolean quit flag</returns>
        </member>
        <member name="P:QuantConnect.IAlgorithm.SubscriptionManager">
            <summary>
            Get/Set the Data Manager
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.Securities">
            <summary>
            Security Object Collection Class
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.Portfolio">
            <summary>
            Security Portfolio Management Class:
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.Transactions">
            <summary>
            Security Transaction Processing Class.
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.Name">
            <summary>
            Set a public name for the algorithm.
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.ProcessingOrder">
            <summary>
            Property indicating the transaction handler is currently processing an order and the algorithm should wait (syncrhonous order processing).
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.Time">
            <summary>
            Get the current date/time.
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.StartDate">
            <summary>
            Get Requested Backtest Start Date
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.EndDate">
            <summary>
            Get Requested Backtest End Date
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.AlgorithmId">
            <summary>
            AlgorithmId for the backtest
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.Orders">
            <summary>
            Accessor for Filled Orders:
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.RunMode">
            <summary>
            Run Backtest Mode for the algorithm: Automatic, Parallel or Series.
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.Locked">
            <summary>
            Indicator if the algorithm has been initialised already. When this is true cash and securities cannot be modified.
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.DebugMessages">
            <summary>
            Debug messages from the strategy:
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.ErrorMessages">
            <summary>
            Error messages from the strategy:
            </summary>
        </member>
        <member name="P:QuantConnect.IAlgorithm.LogMessages">
            <summary>
            Log messages from the strategy:
            </summary>
        </member>
    </members>
</doc>
